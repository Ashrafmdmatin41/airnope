use anyhow::Result;
use regex::{Regex, RegexBuilder};

const A: &str = "[–∞aüÖ∞üÖ∞Ô∏èüá¶üá¶]";
const I: &str = "[—ñiI1l‚ÑπÔ∏èüáÆ]";
const R: &str = "[—Ärüá∑]";
const D: &str = "[d‘Åüá©]";
const O: &str = "[–æo0üÖæÔ∏èüá¥]";
const P: &str = "[—ÄpœÅœ±üÖøÔ∏èüáµ]";

#[derive(Clone)]
pub struct RegularExpression {
    pattern: Regex,
}

impl RegularExpression {
    pub async fn new() -> Result<Self> {
        let pattern = RegexBuilder::new(
            [A, I, R, D, R, O, P]
                .map(|s| s.to_string())
                .join(r"\s?")
                .as_str(),
        )
        .case_insensitive(true)
        .build()?;

        Ok(Self { pattern })
    }

    pub async fn is_spam(&self, txt: &str) -> Result<bool> {
        let result = self.pattern.is_match(txt);
        if result {
            log::debug!("Message detected as spam by RegularExpression: {:?}", txt);
        }
        Ok(result)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_is_spam() {
        let test_cases = vec![
            ("airdrop", true),
            ("–∞irdrop", true), // Cyrillic –∞
            ("–∞irdr–æ—Ä", true), // Cyrillic –∞ and Cyrillic –æ
            ("–∞irdr–æp", true), // Cyrillic –∞ and Cyrillic –æ
            ("–∞irdr–æ—Ä", true), // Cyrillic –∞, Cyrillic –æ, and Cyrillic —Ä
            ("airdr–æ—Ä", true), // Cyrillic –æ
            ("airdr–æp", true), // Cyrillic –æ
            ("airdr–æ—Ä", true), // Cyrillic –æ and Cyrillic —Ä
            ("–∞irdr–æp", true), // Cyrillic –∞, and Cyrillic –æ
            ("–∞irdr–æ—Ä", true), // Cyrillic –∞, Cyrillic –æ, and Cyrillic —Ä
            ("–∞irdrop", true), // Cyrillic –∞
            ("–∞irdr–æ—Ä", true), // Cyrillic –∞ and Cyrillic —Ä
            ("–∞irdrop", true), // Cyrillic –∞
            ("air‘Årop", true), // Cyrillic ‘Å
            ("a—ñr‘Årop", true), // Cyrillic —ñ and Cyrillic ‘Å
            ("air‘Åro—Ä", true), // Cyrillic —Ä
            ("–∞irdr–æ—Ä", true), // Cyrillic –∞ and Cyrillic —Ä
            ("a—ñrdrop", true), // Cyrillic —ñ
            ("–∞—ñrdrop", true), // Cyrillic –∞ and Cyrillic —ñ
            ("–∞—ñrdrop", true), // Cyrillic –∞ and Cyrillic —ñ
            ("–∞—ñrdrop", true), // Cyrillic –∞ and Cyrillic —ñ
            ("a—ñrdro—Ä", true), // Cyrillic —ñ and Cyrillic —Ä
            ("–∞—ñrdro—Ä", true), // Cyrillic –∞, Cyrillic —ñ, and Cyrillic —Ä
            ("–∞irdr–æ—Ä", true), // Cyrillic –∞ and Cyrillic —Ä
            ("a—ñr‘År–æ—Ä", true), // Cyrillic —ñ, Cyrillic ‘Å, and Cyrillic —Ä
            ("a—ñr‘Årop", true), // Cyrillic —ñ and Cyrillic ‘Å
            ("airdro—Ä", true), // Cyrillic —Ä
            ("air‘Årop", true), // Greek delta, Œî
            ("–∞irdr–æ—Ä", true), // Greek o, Œø
            ("–∞—ñr‘Årop", true), // Greek iota, Œπ
            ("air‘Åro—Ä", true), // Greek rho, œÅ
            ("–∞irdr–æ—Ä", true), // Greek omicron, Œø
            ("a—ñrdrop", true), // Greek iota, Œπ
            ("–∞—ñrdrop", true), // Greek alpha, Œ±
            ("–∞—ñrdrop", true), // Greek iota, Œπ
            ("a—ñrdro—Ä", true), // Greek iota, Œπ, and rho, œÅ
            ("–∞irdr–æ—Ä", true), // Greek omicron, Œø, and rho, œÅ
            ("a—ñr‘År–æ—Ä", true), // Greek iota, Œπ, delta, Œî, and rho, œÅ
            ("a—ñr‘Årop", true), // Greek iota, Œπ, and delta, Œî
            ("airdro—Ä", true), // Greek rho, œÅ
            ("–°l–∞im  Q –°OMMUNITY –êIRDROP\n Join the Q movement.", true), // snippet from a real one
            ("üÖ∞irdrop", true), // with emoji
            ("üÖ∞Ô∏è‚ÑπÔ∏èirdrüÖæÔ∏èüáµ", true), // with emojis
            ("air drop", true), // with space
            ("a i r d r o p", true), // with single spaces
            ("a i r d r o p", true), // with different kids of spaces
            ("üá¶ üáÆ üá∑ üá© üá∑ üá¥ üáµ", true), // with special characters and spaces
            ("42", false),
            ("", false),
        ];
        for (word, expected) in test_cases {
            for w in [word, word.to_uppercase().as_str()] {
                let model = RegularExpression::new().await.unwrap();
                let got = model.is_spam(w).await.unwrap();
                assert_eq!(
                    got, expected,
                    "expected: {:?} for {:?}, got: {:?}",
                    expected, w, got
                );
            }
        }
    }
}
