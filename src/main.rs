use anyhow::Result;
use lazy_static::lazy_static;
use regex::{Regex, RegexBuilder};
use teloxide::prelude::{Bot, Message, *};
use teloxide::requests::Requester;
use teloxide::respond;
use teloxide::types::MessageKind;

lazy_static! {
    static ref AIRDROP: Regex =
        RegexBuilder::new(r"[–∞aüÖ∞üÖ∞Ô∏èüá¶][—ñiI1l‚ÑπÔ∏è]([—Är][d‘Å]|üá∑)[—Är][–æo0üÖæÔ∏èüá¥][—ÄpœÅœ±üÖøÔ∏èüáµ]")
            .case_insensitive(true)
            .build()
            .unwrap();
}

fn is_spam(msg: Option<&str>) -> bool {
    if let Some(txt) = msg {
        return AIRDROP.is_match(txt);
    }
    false
}

async fn delete(bot: &Bot, msg: &Message) -> Result<()> {
    bot.delete_message(msg.chat.id, msg.id).send().await?;
    Ok(())
}

async fn ban(bot: &Bot, msg: &Message) -> Result<()> {
    if let Some(user) = msg.from() {
        bot.kick_chat_member(msg.chat.id, user.id).send().await?;
    }
    Ok(())
}

#[tokio::main]
async fn main() -> Result<()> {
    let bot = Bot::from_env(); // requires TELOXIDE_TOKEN environment variable
    teloxide::repl(bot, |bot: Bot, msg: Message| async move {
        if let MessageKind::Common(_) = &msg.kind {
            if is_spam(msg.text()) {
                if let Err(e) = tokio::try_join!(delete(&bot, &msg), ban(&bot, &msg)) {
                    log::error!("Error handling spam: {:?}", e);
                }
            }
        }
        respond(())
    })
    .await;
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_is_spam() {
        let test_cases = vec![
            ("airdrop", true),
            ("–∞irdrop", true), // Cyrillic –∞
            ("–∞irdr–æ—Ä", true), // Cyrillic –∞ and Cyrillic –æ
            ("–∞irdr–æp", true), // Cyrillic –∞ and Cyrillic –æ
            ("–∞irdr–æ—Ä", true), // Cyrillic –∞, Cyrillic –æ, and Cyrillic —Ä
            ("airdr–æ—Ä", true), // Cyrillic –æ
            ("airdr–æp", true), // Cyrillic –æ
            ("airdr–æ—Ä", true), // Cyrillic –æ and Cyrillic —Ä
            ("–∞irdr–æp", true), // Cyrillic –∞, and Cyrillic –æ
            ("–∞irdr–æ—Ä", true), // Cyrillic –∞, Cyrillic –æ, and Cyrillic —Ä
            ("–∞irdrop", true), // Cyrillic –∞
            ("–∞irdr–æ—Ä", true), // Cyrillic –∞ and Cyrillic —Ä
            ("–∞irdrop", true), // Cyrillic –∞
            ("air‘Årop", true), // Cyrillic ‘Å
            ("a—ñr‘Årop", true), // Cyrillic —ñ and Cyrillic ‘Å
            ("air‘Åro—Ä", true), // Cyrillic —Ä
            ("–∞irdr–æ—Ä", true), // Cyrillic –∞ and Cyrillic —Ä
            ("a—ñrdrop", true), // Cyrillic —ñ
            ("–∞—ñrdrop", true), // Cyrillic –∞ and Cyrillic —ñ
            ("–∞—ñrdrop", true), // Cyrillic –∞ and Cyrillic —ñ
            ("–∞—ñrdrop", true), // Cyrillic –∞ and Cyrillic —ñ
            ("a—ñrdro—Ä", true), // Cyrillic —ñ and Cyrillic —Ä
            ("–∞—ñrdro—Ä", true), // Cyrillic –∞, Cyrillic —ñ, and Cyrillic —Ä
            ("–∞irdr–æ—Ä", true), // Cyrillic –∞ and Cyrillic —Ä
            ("a—ñr‘År–æ—Ä", true), // Cyrillic —ñ, Cyrillic ‘Å, and Cyrillic —Ä
            ("a—ñr‘Årop", true), // Cyrillic —ñ and Cyrillic ‘Å
            ("airdro—Ä", true), // Cyrillic —Ä
            ("air‘Årop", true), // Greek delta, Œî
            ("–∞irdr–æ—Ä", true), // Greek o, Œø
            ("–∞—ñr‘Årop", true), // Greek iota, Œπ
            ("air‘Åro—Ä", true), // Greek rho, œÅ
            ("–∞irdr–æ—Ä", true), // Greek omicron, Œø
            ("a—ñrdrop", true), // Greek iota, Œπ
            ("–∞—ñrdrop", true), // Greek alpha, Œ±
            ("–∞—ñrdrop", true), // Greek iota, Œπ
            ("a—ñrdro—Ä", true), // Greek iota, Œπ, and rho, œÅ
            ("–∞irdr–æ—Ä", true), // Greek omicron, Œø, and rho, œÅ
            ("a—ñr‘År–æ—Ä", true), // Greek iota, Œπ, delta, Œî, and rho, œÅ
            ("a—ñr‘Årop", true), // Greek iota, Œπ, and delta, Œî
            ("airdro—Ä", true), // Greek rho, œÅ
            ("–°l–∞im  Q –°OMMUNITY –êIRDROP\n Join the Q movement.", true), // snippet from a real one
            ("üÖ∞irdrop", true), // with emoji
            ("aiüá∑rop", true),  // with rd emoji
            ("üÖ∞Ô∏è‚ÑπÔ∏èirdrüÖæÔ∏èüáµ", true), // with emojis
            ("42", false),
            ("", false),
        ];
        for (word, expected) in test_cases {
            for w in [word, word.to_uppercase().as_str()] {
                let got = is_spam(Some(w));
                assert_eq!(
                    got, expected,
                    "expected: {:?} for {:?}, got: {:?}",
                    expected, w, got
                );
            }
        }
        assert!(!is_spam(None));
    }
}
